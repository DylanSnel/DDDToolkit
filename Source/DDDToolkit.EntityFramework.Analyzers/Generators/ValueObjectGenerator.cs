using DDDToolkit.Abstractions.Attributes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneratorsToolkit.Providers;
using SourceGeneratorsToolkit.Providers.Contexts;
using SourceGeneratorsToolkit.SyntaxExtensions;
using System.Text;

namespace DDDToolkit.EntityFramework.Analyzers.Generators;

[Generator]
public class ValueObjectGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //#if DEBUG
        //        if (!System.Diagnostics.Debugger.IsAttached)
        //        {

        //            System.Diagnostics.Debugger.Launch();
        //        }
        //#endif

        var singleValueObjects = context.FindAttributesProvider<ValueObjectAttribute, RecordDeclarationSyntax>();
        context.RegisterSourceOutput(singleValueObjects, Execute);
    }

    private static void Execute(SourceProductionContext context, TypeAttributeSyntaxContext data)
    {
        var recordDeclaration = data.TargetNode as RecordDeclarationSyntax;
        if (recordDeclaration is null)
        {
            return;
        }
        var name = recordDeclaration.GetName();
        var @namespace = recordDeclaration.GetNamespace();
        var accessModifier = recordDeclaration.GetAccessModifier();


        var sourceCode = $$$"""
                            // <auto-generated/>
                            using DDDToolkit.BaseTypes;
                            using System.ComponentModel.DataAnnotations.Schema;

                            namespace {{{@namespace}}};

                            [ComplexType]
                            {{{accessModifier}}} partial record {{{name}}}
                            {
                            }
    
                            """;
        // Add the generated source to the compilation
        context.AddSource($"{@namespace}.{name}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

}
