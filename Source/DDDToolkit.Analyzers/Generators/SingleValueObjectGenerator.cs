using DDDToolkit.Abstractions.Attributes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneratorsToolkit.Providers;
using SourceGeneratorsToolkit.Providers.Contexts;
using SourceGeneratorsToolkit.SyntaxExtensions;
using System.Linq;
using System.Text;

namespace DDDToolkit.Analyzers.Generators;

[Generator]
public class SingleValueObjectGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //#if DEBUG
        //        if (!System.Diagnostics.Debugger.IsAttached)
        //        {

        //            System.Diagnostics.Debugger.Launch();
        //        }
        //#endif

        var singleValueObjectSyntax = context.FindAttributesProvider<SingleValueObjectAttribute, TypeDeclarationSyntax>();


        context.RegisterSourceOutput(singleValueObjectSyntax, CreateSingleValueObject);
    }

    private static void CreateSingleValueObject(SourceProductionContext context, TypeAttributeSyntaxContext data)
    {

        var recordDeclaration = data.TargetNode as RecordDeclarationSyntax;
        if (recordDeclaration is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(Diagnostics.ValueObjectShouldBeRecord, data.TargetNode.GetLocation(), data.TargetSymbol.Name));
            return;
        }
        var name = recordDeclaration.GetName();
        var @namespace = recordDeclaration.GetNamespace();
        var accessModifier = recordDeclaration.GetAccessModifier();
        var properties = recordDeclaration.GetProperties();
        var type = data.Attributes.First(x => x.match).attribute.GenericTypes.First().Name;


        var sourceCode = $$$"""
                            // <auto-generated/>
                            using DDDToolkit.BaseTypes;
                            using System.Text.Json.Serialization;

                            namespace {{{@namespace}}};
    
                            partial record {{{name}}} : SingleValueObject<{{{type}}}>
                            {
                                protected {{{name}}}({{{type}}} value) : base(value)
                                {
                                }

                                [JsonConstructor]
                                protected {{{name}}}()
                                {
                                }

                                public override int GetHashCode()
                                    => base.GetHashCode();
                                
                                public virtual bool Equals({{{name}}}? other)
                                {
                                    if (other is null)
                                    {
                                        return false;
                                    }
                                    return GetEqualityComponents().SequenceEqual(other.GetEqualityComponents());
                                }
                            }
    
                            """;
        // Add the generated source to the compilation
        context.AddSource($"{@namespace}.{name}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

}
