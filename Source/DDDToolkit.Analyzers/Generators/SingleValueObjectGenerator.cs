using DDDToolkit.Abstractions.Attributes;
using DDDToolkit.Analyzers.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneratorsToolkit.Providers;
using SourceGeneratorsToolkit.SyntaxExtensions;
using System.Linq;
using System.Text;

namespace DDDToolkit.Analyzers.Generators;

[Generator]
public class SingleValueObjectGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //#if DEBUG
        //        if (!System.Diagnostics.Debugger.IsAttached)
        //        {

        //            System.Diagnostics.Debugger.Launch();
        //        }
        //#endif

        var singleValueObjects = context.FindAttributesProvider<SingleValueObjectAttribute, RecordDeclarationSyntax, GenericObjectDefinition>(
              transform: static (ctx, _) =>
              {
                  var classDeclaration = ctx.TargetNode as RecordDeclarationSyntax;
                  GenericObjectDefinition singleValueObjectDefinition = new()
                  {
                      Name = classDeclaration!.Identifier.Text,
                      Namespace = classDeclaration.Parent is BaseNamespaceDeclarationSyntax namespaceDeclaration ? namespaceDeclaration.Name.ToString() : "",
                      Type = ctx.Attributes.First(x => x.match).attribute.GenericTypes.First().Name,
                      AccessModifier = classDeclaration.GetAccessModifier(),
                  };
                  if (singleValueObjectDefinition.Type == "String")
                  {
                      singleValueObjectDefinition.Type = "string";
                  }

                  return singleValueObjectDefinition;

              });
        context.RegisterSourceOutput(singleValueObjects, Execute);
    }

    private static void Execute(SourceProductionContext context, GenericObjectDefinition data)
    {
        var sourceCode = $$$"""
                            // <auto-generated/>
                            using FluentResults;
                            using DDDToolkit.BaseTypes;

                            #nullable enable
                            namespace {{{data.Namespace}}};
    
                            {{{data.AccessModifier}}} partial record {{{data.Name}}} : SingleValueObject<{{{data.Type}}}>
                            {
                                private {{{data.Name}}}({{{data.Type}}} value) : base(value)
                                {
                                }

                                public override int GetHashCode()
                                    => base.GetHashCode();


                                public static Result<{{{data.Name}}}> Create({{{data.Type}}} value)
                                {
                                    var obj = new {{{data.Name}}}(value);
                                    obj.Value = obj.Transform(value);
                                    var result = obj.Validate(obj.Value);
                                    if (result.IsFailed)
                                    {
                                        return result.ToResult<{{{data.Name}}}>();
                                    }
                                    return obj;
                                }

                                {{{(data.Type == "string" ? $@"" :
                                $$$"""
                                   public static Result<{{{data.Name}}}?> Create({{{data.Type}}}? value)
                                   {
                                       if(!value.HasValue)
                                       {
                                           return Result.Ok<{{{data.Name}}}?>(null);
                                       }
                                       return Create(value.Value);
                                    }
                                """)}}}     
                            }
    
                            """;
        // Add the generated source to the compilation
        context.AddSource($"{data.Namespace}.{data.Name}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

}
